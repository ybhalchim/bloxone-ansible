---
- module_defaults:
    group/infoblox.bloxone.all:
      csp_url: "{{ csp_url }}"
      api_key: "{{ api_key }}"
  block:
    # Create a random IP space name to avoid conflicts
    - ansible.builtin.set_fact:
        tag_value: "site-{{ 999999 | random | string }}"

    - name: "Create a Subnet (check mode)"
      infoblox.bloxone.ipam_subnet:
        address: "10.0.0.0/24"
        space: "{{ _ip_space.id }}"
        state: "present"
      check_mode: true
      register: subnet
    - name: Get information about the Subnet
      infoblox.bloxone.ipam_subnet_info:
        filters:
          address: "10.0.0.0"
          space: "{{ _ip_space.id }}"
          cidr: 24
      register: subnet_info
    - assert:
        that:
          - subnet is changed
          - subnet is not failed
          - subnet_info.objects | length == 0

    - name: "Create a Subnet"
      infoblox.bloxone.ipam_subnet:
        address: "10.0.0.0/24"
        space: "{{ _ip_space.id }}"
        state: "present"
      register: subnet
    - name: Get information about the Subnet
      infoblox.bloxone.ipam_subnet_info:
        filters:
          address: "10.0.0.0"
          space: "{{ _ip_space.id }}"
          cidr: 24
      register: subnet_info
    - assert:
        that:
          - subnet is not failed
          - subnet_info.objects | length == 1
          - subnet_info.objects[0].id == subnet.id
          - subnet_info.objects[0].address == subnet.object.address

    - name: "Create a Subnet (idempotent)"
      infoblox.bloxone.ipam_subnet:
        address: "10.0.0.0/24"
        space: "{{ _ip_space.id }}"
        state: "present"
      register: subnet
    - assert:
        that:
          - subnet is not changed
          - subnet is not failed

    - name: "Delete a Subnet (check mode)"
      infoblox.bloxone.ipam_subnet:
        address: "10.0.0.0/24"
        space: "{{ _ip_space.id }}"
        state: "absent"
      check_mode: true
      register: subnet
    - name: Get information about the Subnet
      infoblox.bloxone.ipam_subnet_info:
        filters:
          address: "10.0.0.0"
          space: "{{ _ip_space.id }}"
          cidr: 24
      register: subnet_info
    - assert:
        that:
          - subnet is changed
          - subnet is not failed
          - subnet_info.objects | length == 1

    - name: "Delete a Subnet"
      infoblox.bloxone.ipam_subnet:
        address: "10.0.0.0/24"
        space: "{{ _ip_space.id }}"
        state: "absent"
      register: subnet
    - name: Get information about the Subnet
      infoblox.bloxone.ipam_subnet_info:
        filters:
          address: "10.0.0.0"
          space: "{{ _ip_space.id }}"
          cidr: 24
      register: subnet_info
    - assert:
        that:
          - subnet is changed
          - subnet is not failed
          - subnet_info.objects | length == 0

    - name: "Delete a Subnet (idempotent)"
      infoblox.bloxone.ipam_subnet:
        address: "10.0.0.0/24"
        space: "{{ _ip_space.id }}"
        state: "absent"
      register: subnet
    - assert:
        that:
          - subnet is not changed
          - subnet is not failed

    - name: "Create a Subnet with ASM config overridden"
      infoblox.bloxone.ipam_subnet:
        address: "10.0.0.0/24"
        space: "{{ _ip_space.id }}"
        state: "present"
        asm_config:
          asm_threshold: 70
          enable: true
          enable_notification: true
          forecast_period: 12
          growth_factor: 40
          growth_type: "count"
          history: 40
          min_total: 30
          min_unused: 30
          reenable_date: "2020-01-10T10:11:22Z"
        inheritance_sources:
          asm_config:
            asm_enable_block:
              action: inherit
            asm_growth_block:
              action: inherit
            asm_threshold:
              action: override
            forecast_period:
              action: override
            history:
              action: override
            min_total:
              action: override
            min_unused:
              action: override
      register: subnet
    - name: Get information about the Subnet
      infoblox.bloxone.ipam_subnet_info:
        filters:
          address: "10.0.0.0"
          space: "{{ _ip_space.id }}"
          cidr: 24
      register: subnet_info
    - assert:
        that:
          - subnet is not failed
          - subnet_info.objects | length == 1
          - subnet_info.objects[0].asm_config.asm_threshold == 70
          - subnet_info.objects[0].asm_config.forecast_period == 12
          - subnet_info.objects[0].inheritance_sources.asm_config.asm_threshold.action == "override"
          - subnet_info.objects[0].inheritance_sources.asm_config.forecast_period.action == "override"

    - name: "Create a Subnet with comment"
      infoblox.bloxone.ipam_subnet:
        address: "10.0.0.0/24"
        space: "{{ _ip_space.id }}"
        state: "present"
        comment: "Comment."
      register: subnet
    - name: Get information about the Subnet
      infoblox.bloxone.ipam_subnet_info:
        filters:
          address: "10.0.0.0"
          space: "{{ _ip_space.id }}"
          cidr: 24
      register: subnet_info
    - assert:
        that:
          - subnet is not failed
          - subnet_info.objects | length == 1
          - subnet_info.objects[0].comment == subnet.object.comment

    - name: "Create a Subnet with ddns_client_update set to server"
      infoblox.bloxone.ipam_subnet:
        address: "10.0.0.0/24"
        space: "{{ _ip_space.id }}"
        state: "present"
        ddns_client_update: "server"
      register: subnet
    - name: Get information about the Subnet
      infoblox.bloxone.ipam_subnet_info:
        filters:
          address: "10.0.0.0"
          space: "{{ _ip_space.id }}"
          cidr: 24
      register: subnet_info
    - assert:
        that:
          - subnet is not failed
          - subnet_info.objects | length == 1
          - subnet_info.objects[0].ddns_client_update == subnet.object.ddns_client_update

    - name: "Create a Subnet with ddns_conflict_resolution_mode set to no_check_with_dhcid"
      infoblox.bloxone.ipam_subnet:
        address: "10.0.0.0/24"
        space: "{{ _ip_space.id }}"
        state: "present"
        ddns_conflict_resolution_mode: "no_check_with_dhcid"
      register: subnet
    - name: Get information about the Subnet
      infoblox.bloxone.ipam_subnet_info:
        filters:
          address: "10.0.0.0"
          space: "{{ _ip_space.id }}"
          cidr: 24
      register: subnet_info
    - assert:
        that:
          - subnet is not failed
          - subnet_info.objects | length == 1
          - subnet_info.objects[0].ddns_conflict_resolution_mode == "no_check_with_dhcid"

    - name: "Create a Subnet with ddns_domain set to non empty"
      infoblox.bloxone.ipam_subnet:
        address: "10.0.0.0/24"
        space: "{{ _ip_space.id }}"
        state: "present"
        ddns_domain: "abc"
      register: subnet
    - name: Get information about the Subnet
      infoblox.bloxone.ipam_subnet_info:
        filters:
          address: "10.0.0.0"
          space: "{{ _ip_space.id }}"
          cidr: 24
      register: subnet_info
    - assert:
        that:
          - subnet is not failed
          - subnet_info.objects | length == 1
          - subnet_info.objects[0].ddns_domain == "abc"

    - name: "Create a Subnet with ddns_generate_name set to true"
      infoblox.bloxone.ipam_subnet:
        address: "10.0.0.0/24"
        space: "{{ _ip_space.id }}"
        state: "present"
        ddns_generate_name: "true"
      register: subnet
    - name: Get information about the Subnet
      infoblox.bloxone.ipam_subnet_info:
        filters:
          address: "10.0.0.0"
          space: "{{ _ip_space.id }}"
          cidr: 24
      register: subnet_info
    - assert:
        that:
          - subnet is not failed
          - subnet_info.objects | length == 1
          - subnet_info.objects[0].ddns_generate_name == true

    - name: "Create a Subnet with ddns_send_updates set to false"
      infoblox.bloxone.ipam_subnet:
        address: "10.0.0.0/24"
        space: "{{ _ip_space.id }}"
        state: "present"
        ddns_send_updates: "false"
      register: subnet
    - name: Get information about the Subnet
      infoblox.bloxone.ipam_subnet_info:
        filters:
          address: "10.0.0.0"
          space: "{{ _ip_space.id }}"
          cidr: 24
      register: subnet_info
    - assert:
        that:
          - subnet is not failed
          - subnet_info.objects | length == 1
          - subnet_info.objects[0].ddns_send_updates == false

    - name: "Create a Subnet with ddns_update_on_renew set to true"
      infoblox.bloxone.ipam_subnet:
        address: "10.0.0.0/24"
        space: "{{ _ip_space.id }}"
        state: "present"
        ddns_update_on_renew: "true"
      register: subnet
    - name: Get information about the Subnet
      infoblox.bloxone.ipam_subnet_info:
        filters:
          address: "10.0.0.0"
          space: "{{ _ip_space.id }}"
          cidr: 24
      register: subnet_info
    - assert:
        that:
          - subnet is not failed
          - subnet_info.objects | length == 1
          - subnet_info.objects[0].ddns_update_on_renew == true

#     Skip this due to backend bug NORTHSTAR-12587
#    - name: "Create a Subnet with ddns_ttl_percent set to 25"
#      infoblox.bloxone.ipam_subnet:
#        address: "10.0.0.0/24"
#        space: "{{ ip_space.id }}"
#        state: "present"
#        ddns_ttl_percent: 25.0
#      register: subnet
#    - name: Get information about the Subnet
#      infoblox.bloxone.ipam_subnet_info:
#        filters:
#          address: "10.0.0.0"
#          space: "{{ ip_space.id }}"
#          cidr: 24
#      register: subnet_info
#    - assert:
#        that:
#          - subnet is not failed
#          - subnet_info.objects | length == 1
#          - subnet_info.objects[0].ddns_ttl_percent == 25.0

    - name: "Create a Subnet with ddns_use_conflict_resolution set to false"
      infoblox.bloxone.ipam_subnet:
        address: "10.0.0.0/24"
        space: "{{ _ip_space.id }}"
        state: "present"
        ddns_use_conflict_resolution: "false"
      register: subnet
    - name: Get information about the Subnet
      infoblox.bloxone.ipam_subnet_info:
        filters:
          address: "10.0.0.0"
          space: "{{ _ip_space.id }}"
          cidr: 24
      register: subnet_info
    - assert:
        that:
          - subnet is not failed
          - subnet_info.objects | length == 1
          - subnet_info.objects[0].ddns_use_conflict_resolution == false

    - name: "Create a Subnet with DHCP config overridden"
      infoblox.bloxone.ipam_subnet:
        address: "10.0.0.0/24"
        space: "{{ _ip_space.id }}"
        dhcp_config:
          lease_time: 3600
        inheritance_sources:
          dhcp_config:
            lease_time:
              action: override
            # The API currently requires all fields inside the inheritance config to be explicitly provided,
            # or it fails with error 'The value of an inheritance action field is not valid'.
            abandoned_reclaim_time:
              action: inherit
            abandoned_reclaim_time_v6:
              action: inherit
            allow_unknown:
              action: inherit
            allow_unknown_v6:
              action: inherit
            echo_client_id:
              action: inherit
            filters:
              action: inherit
            filters_v6:
              action: inherit
            ignore_client_uid:
              action: inherit
            ignore_list:
              action: inherit
            lease_time_v6:
              action: inherit
        state: "present"
      register: subnet
    - name: Get information about the Subnet
      infoblox.bloxone.ipam_subnet_info:
        filters:
          address: "10.0.0.0"
          space: "{{ _ip_space.id }}"
          cidr: 24
      register: subnet_info
    - assert:
        that:
          - subnet is not failed
          - subnet_info.objects | length == 1
          - subnet_info.objects[0].dhcp_config.lease_time == 3600
          - subnet_info.objects[0].inheritance_sources.dhcp_config.lease_time.action == "override"

    - name: "Create a Subnet with DHCP disabled"
      infoblox.bloxone.ipam_subnet:
        address: "10.0.0.0/24"
        space: "{{ _ip_space.id }}"
        state: "present"
        disable_dhcp: "true"
      register: subnet
    - name: Get information about the Subnet
      infoblox.bloxone.ipam_subnet_info:
        filters:
          address: "10.0.0.0"
          space: "{{ _ip_space.id }}"
          cidr: 24
      register: subnet_info
    - assert:
        that:
          - subnet is not failed
          - subnet_info.objects | length == 1
          - subnet_info.objects[0].disable_dhcp == true

    - name: "Create a Subnet with hostname_rewrite_enabled set to true"
      infoblox.bloxone.ipam_subnet:
        address: "10.0.0.0/24"
        space: "{{ _ip_space.id }}"
        state: "present"
        hostname_rewrite_enabled: "true"
      register: subnet
    - name: Get information about the Subnet
      infoblox.bloxone.ipam_subnet_info:
        filters:
          address: "10.0.0.0"
          space: "{{ _ip_space.id }}"
          cidr: 24
      register: subnet_info
    - assert:
        that:
          - subnet is not failed
          - subnet_info.objects | length == 1
          - subnet_info.objects[0].hostname_rewrite_enabled == true

    - name: "Create a Subnet with rebind_time set to 60 and renew_time set to 50"
      infoblox.bloxone.ipam_subnet:
        address: "10.0.0.0/24"
        space: "{{ _ip_space.id }}"
        state: "present"
        rebind_time: 60
        renew_time: 50
      register: subnet
    - name: Get information about the Subnet
      infoblox.bloxone.ipam_subnet_info:
        filters:
          address: "10.0.0.0"
          space: "{{ _ip_space.id }}"
          cidr: 24
      register: subnet_info
    - assert:
        that:
          - subnet is not failed
          - subnet_info.objects | length == 1
          - subnet_info.objects[0].rebind_time == 60
          - subnet_info.objects[0].renew_time == 50

    - name: "Create a Subnet with tags"
      infoblox.bloxone.ipam_subnet:
        address: "10.0.0.0/24"
        space: "{{ _ip_space.id }}"
        tags:
          location: "{{ tag_value }}"
        state: "present"
      register: subnet
    - name: Get information about the Subnet
      infoblox.bloxone.ipam_subnet_info:
        filters:
          address: "10.0.0.0"
          space: "{{ _ip_space.id }}"
          cidr: 24
      register: subnet_info
    - assert:
        that:
          - subnet is not failed
          - subnet_info.objects | length == 1
          - subnet_info.objects[0].tags.location == tag_value

    - name: "Create a Subnet with separate address and cidr"
      infoblox.bloxone.ipam_subnet:
        address: "10.0.0.0"
        cidr: 24
        space: "{{ _ip_space.id }}"
        state: "present"
      register: subnet
    - name: Get information about the Subnet
      infoblox.bloxone.ipam_subnet_info:
        filters:
          address: "10.0.0.0"
          space: "{{ _ip_space.id }}"
          cidr: 24
      register: subnet_info
    - assert:
        that:
          - subnet is not failed
          - subnet_info.objects | length == 1
          - subnet_info.objects[0].id == subnet.id
          - subnet_info.objects[0].cidr == 24

    - name: "Create a Next available Subnet"
      infoblox.bloxone.ipam_subnet:
        cidr: 24
        next_available_id: "{{ _address_block.id }}"
        space: "{{ _ip_space.id }}"
        state: "present"
      register: next_available_subnet
    - name: Get information about the Subnet
      infoblox.bloxone.ipam_subnet_info:
        id: "{{ next_available_subnet.id }}"
      register: next_available_subnet_info
    - assert:
        that:
          - next_available_subnet is changed
          - next_available_subnet is not failed
          - next_available_subnet_info.objects | length == 1

  always:
    # Cleanup if the test fails
    - name: "Delete IP Space"
      ansible.builtin.include_role:
        name: setup_ip_space
        tasks_from: cleanup.yml
