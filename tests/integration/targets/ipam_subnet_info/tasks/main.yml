---
- module_defaults:
    group/infoblox.bloxone.all:
      csp_url: "{{ csp_url }}"
      api_key: "{{ api_key }}"
  block:
    # Create a random IP space name to avoid conflicts
    - ansible.builtin.set_fact:
        tag_value: "site-{{ 999999 | random | string }}"

    - name: "Create a Subnet"
      infoblox.bloxone.ipam_subnet:
        address: "10.0.0.0/24"
        space: "{{ _ip_space.id }}"
        tags:
          location: "{{ tag_value }}"
        state: "present"
      register: subnet

    - name: Get Subnet information by ID
      infoblox.bloxone.ipam_subnet_info:
        id: "{{ subnet.id }}"
      register: subnet_info
    - assert:
        that:
          - subnet_info.objects | length == 1
          - subnet_info.objects[0].name == subnet.object.name
          - subnet_info.objects[0].id == subnet.id

    - name: Get Subnet information by filters
      infoblox.bloxone.ipam_subnet_info:
        filters:
          address: "10.0.0.0"
          space: "{{ _ip_space.id }}"
          cidr: 24
      register: subnet_info
    - assert:
        that:
          - subnet_info.objects | length == 1
          - subnet_info.objects[0].id == subnet.id

    - name: Get Subnet information by filter query
      infoblox.bloxone.ipam_subnet_info:
        filter_query: "address=='10.0.0.0' and space=='{{ _ip_space.id }}' and cidr==24"
      register: subnet_info
    - assert:
        that:
          - subnet_info.objects | length == 1
          - subnet_info.objects[0].id == subnet.id

    - name: Get Subnet information by tag filters
      infoblox.bloxone.ipam_subnet_info:
        tag_filters:
          location: "{{ tag_value }}"
      register: subnet_info
    - assert:
        that:
          - subnet_info.objects | length == 1
          - subnet_info.objects[0].id == subnet.id

  always:
    # Cleanup if the test fails
    - name: "Delete IP Space"
      ansible.builtin.include_role:
        name: setup_ip_space
        tasks_from: cleanup.yml
